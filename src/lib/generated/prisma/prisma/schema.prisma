generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/generated/prisma/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  role      UserRole  @default(USER)
  email     String    @unique
  chats     Chat[]
  projects  Project[]
}

model Project {
  id           String       @id @default(cuid())
  name         String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  profileId    String
  dependencies Dependency[]
  profile      Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([id, profileId])
}

model Dependency {
  id          String    @id @default(cuid())
  name        String    @unique
  accessLink  String?
  lastCheckAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projectId   String
  licenseType String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([id, projectId])
  @@index([name])
}

model Chat {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  profileId String
  profile   Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id        String   @id @default(cuid())
  idx       Int
  prompt    String
  response  String
  createdAt DateTime @default(now())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([chatId, idx])
  @@index([chatId])
}

enum UserRole {
  GUEST
  USER
  ADMIN
}
